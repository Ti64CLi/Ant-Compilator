type program =
	| PreprocessorProgram		<preprocessor> <program?>
	| ControlProgram				<control> <program?>
	| ExpressionProgram			<expression>; <program?>

type preprocessor =
	| Include								include <ident>
	| Define								define <ident> as <program>
	| Org										.org <ident>

type control =
	| Label									<ident>:
	| IfThenElse						if(<bool>) then {<program>} else {<program>}
	| IfThen								do {<program>} if(<bool>)
	| Func									func <ident>(<ident*,>) {<program>}
	| While									while(<bool>) {<program>}
	| Repeat								repeat(<bool>) {<program>}
	| Case									case <bool>: <program>
	| Switch								test(<bool>) in {<program>}

type expression =
	| Num										<int>
	| Args									args[<int>]
	| Move									move(<int>)
	| Turn									turn(<int>)
	| PickUp								pickup(<ident>)
	| Drop									drop()
	| Goto									goto <ident>
	| Mark 									mark(<int>)
	| Unmark								unmark(<int>)
	| Call									call <ident>
	| Nop										nop
	| Return								return
	| Break									break

type bool =
	| Value									<value>
	| Category							<category>
	| Dir										<direction>
	| Or										or(<bool>, <bool>)
	| And										and(<bool>, <bool>)
	| Equal 								eq(<bool>, <bool>)
	| Not										not(<bool>)
	| NotEqual							neq(<bool>, <bool>)
	| Is										is(<category>, <direction>)

type value =
	| Var										<ident>
	| Int										<int>

type direction =
	| Ahead									ahead
	| Left									left
	|      Right									right
	| Here									here

type category =
	| Friend								friend
	| Foe										foe
	| FriendWithFood				friendWithFood
	| FoeWithFood						foeWithFood
	| Food									food
	| Rock									rock
	| Marker								bit(<value>)
	| FoeMarker							foeMarker
	| Home									home
	| FoeHome								foeHome
	| RandInt								randint(<value>)
