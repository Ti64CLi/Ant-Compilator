type program =
	| PreprocessorProgram					<preprocessor> <program?>
	| ControlProgram						<control> <program?>
	| ExpressionProgram						<expression>; <program?>
	| CommentProgram						<comment> <program?>

type comment =
	| Comment								/* <ident+_> */

type preprocessor =
	| Include								include <ident+_>
	| Define								define <ident+_> as <int>
	| Org									.org <ident+_>

type control =
	| Label									<ident+_>:
	| IfThenElse							if(<condition>) then {<program>} else {<program>}
	| IfThen								do {<program>} if(<condition>)
	| Func									func <ident+_>(<ident*,>) {<program>}
	| While									while(<condition>) {<program>}
	| Repeat								repeat(<value>) times {<program>}
	| Switch								test(<category>) in {<case+end>}

type case =
	| Case									case <direction>: <program>

type labelOnError =
	| LabelOnError							, <ident+_>

type expression =
	| Args									args[<value>]
	| Move									move(<value> <labelOnError?>)
	| Turn									turn(<value>)
	| PickUp								pickup(<ident>)
	| Drop									drop()
	| Goto									goto <ident+_>
	| Mark 									mark(<value>)
	| Unmark								unmark(<value>)
	| Call									call <ident+_>
	| Nop									nop
	| Return								return
	| Break									break

type value =
	| Var									<ident+_>
	| Int									<int>

type condition =
	| Is									<category> is <direction>
	| RandInt								randint(<value>) is <int>

type direction =
	| Ahead									ahead
	| Left									left
	| Right									right
	| Here									here

type category =
	| Friend								friend
	| Foe									foe
	| FriendWithFood						friendWithFood
	| FoeWithFood							foeWithFood
	| Food									food
	| Rock									rock
	| Marker								bit(<value>)
	| FoeMarker								foeMarker
	| Home									home
	| FoeHome								foeHome
	| Or									or(<category>, <category>)
	| And									and(<category>, <category>)
	| Not									not(<category>)
