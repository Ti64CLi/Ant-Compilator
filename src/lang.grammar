type expression =
	| Include	include(<ident>);
	| Define	define(<ident> is <expression>);
	| Move		move(<int>);
	| Turn		turn(<int>);
	| PickUp	pickup(<ident>);
	| Drop		drop();
	| Label		<ident>:
	| Goto		goto <ident>;
	| Mark 		mark(<int>);
	| Unmark	unmark(<int>);
	| IfThenElse 			if(<cond>) then {<expression>} else {<expression>}
	| Flip		flip(<int>, <ident>, <ident>);
	| Func		func <ident>(<ident>,*) {<expression>};
	| Look		do {<expression>} if (<cond> is <direction>);
	| While 	while(<cond>) {<expression>}
	| Repeat	repeat(<int>) times {<expression>}

type direction =
	| Ahead				ahead
	| Left				left
	| Right				right
	| Here				here
	| LeftAhead		leftAhead
	| RightAhead	rightAhead

type cond =
	| Friend					friend
	| Foe							foe
	| FriendWithFood	friendWithFood
	| FoeWithFood			foeWithFood
	| Food						food
	| Rock						rock
	| Marker					marker(<int>)
	| FoeMarker				foeMarker
	| Home						home
	| FoeHome					foeHome
	| And 				&& (<cond>) (<cond>)
	| Or				|| (<cond>) (<cond>)