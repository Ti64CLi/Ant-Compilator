type program =
	| PProgram		<preprocessor> <program?>
	| CProgram		<control> <program?>
	| EProgram		<expression>; <program?>

type preprocessor =
	| Include	include <ident>
	| Define	define <ident> as <program>
	| Comment	# [a-zA-Z0-9.]* #

type control =
	| Label			<ident>:
	| IfThenElse	if(<bool>) then {<program>} else {<program>}
	| Func			func <ident>(<ident*,>) {<program>}
	| While			while(<bool>) {<program>}
	| Repeat		repeat(<bool>) {<program>}
	| Case			case <bool>: <program>
	| Switch		switch(<bool>) {<program>}
	| Block			{<program>}

type expression =
<<<<<<< HEAD
	| Num			<int>
	| Move			move(<int>)
	| Turn			turn(<int>)
	| PickUp		pickup(<ident>)
	| Drop			drop()
	| Goto			goto <ident>
	| Mark 			mark(<int>)
	| Unmark		unmark(<int>)
	| Call			call <ident>
	| Nop			nop
	| Return		return

type bool =
	| Value		<value>
	| Category	<category>
	| Dir		<direction>
	| Or		or(<bool>, <bool>)
	| And		and(<bool>, <bool>)
	| Equal 	eq(<bool>, <bool>)
	| Not		not(<bool>)
	| NotEqual	neq(<bool>, <bool>)
	| Is		is(<category>, <direction>)

type value =
	| Var	<ident>
	| Int	<int>
=======
	| Include	include(<ident>);
	| Define	define(<ident> is <expression>);
	| Move		move(<int>);
	| Turn		turn(<int>);
	| PickUp	pickup(<ident>);
	| Drop		drop();
	| Label		<ident>:
	| Goto		goto <ident>;
	| Mark 		mark(<int>);
	| Unmark	unmark(<int>);
	| IfThenElse 			if(<cond>) then {<expression>} else {<expression>}
	| Flip		flip(<int>, <ident>, <ident>);
	| Func		func <ident>(<ident>,*) {<expression>};
	| Look		do {<expression>} if (<cond> is <direction>);
	| While 	while(<cond>) {<expression>}
	| Repeat	repeat(<int>) times {<expression>}
>>>>>>> ff067f37bc7a8f06932caa1c6b1cd8795201effc

type direction =
	| Ahead				ahead
	| Left				left
	| Right				right
	| Here				here
<<<<<<< HEAD
	| LeftAhead			leftAhead
	| RightAhead		rightAhead

type category =
	| Friend				friend
	| Foe					foe
	| FriendWithFood		friendWithFood
	| FoeWithFood			foeWithFood
	| Food					food
	| Rock					rock
	| Marker				bit(<value>)
	| FoeMarker				foeMarker
	| Home					home
	| FoeHome				foeHome
	| RandInt				randint(<value>)
=======
	| LeftAhead		leftAhead
	| RightAhead	rightAhead

type cond =
	| Friend					friend
	| Foe							foe
	| FriendWithFood	friendWithFood
	| FoeWithFood			foeWithFood
	| Food						food
	| Rock						rock
	| Marker					marker(<int>)
	| FoeMarker				foeMarker
	| Home						home
	| FoeHome					foeHome
	| And 				(<cond> && <cond>)
	| Or				(<cond> || <cond>)
>>>>>>> ff067f37bc7a8f06932caa1c6b1cd8795201effc
