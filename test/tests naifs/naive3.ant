

func ASerachFood() {

    if (
        randint(3) is 0
    )
    then {
        turn(1);
        goto B18;
        A18:
    }
    else {
        do {
            turn(5);
            goto F19;
            A19:
        }
        if (
            randint(2) in 0
        )
    } 

    if (
        food is left
    )
    then {
        turn(5);
        goto F0;
        A0:
    }
    else {
        do {
            turn(1);
            goto B1;
            A1:
        }
        if (
            food in right
        )
   } 

    if (
        bit(1) is here
    )
    then {
        nop;
    }
    else {
        if (
        bit(1) is here
        )
        then {
            nop;
        }
        else {
            if (
                bit(2) is here
            )
            then {
                nop;
            }
            else {   
                if (
                    bit(3) is here
                )
                then {
                    nop;
                }
                else {   
                    if (
                        bit(4) is here
                    )
                    then {
                        nop;
                    }
                    else {   
                        if (
                            bit(5) is here
                        )
                        then {
                            nop;
                        }
                        else {   
                            if (
                                bit(5) is here
                            )
                            then {
                                nop;
                            }
                            else {   
                                mark(1);
                            }
                        }
                    }
                }
            }
        }
    } 


    if (
        friendWithFood is ahead
    )
    then {
        turn(1);
        goto B7;
        A7:
        move(1);
        turn(5);
        goto F8;
        A8:
        move(1);
        turn(1);
        goto B9;
        A9;
    } 
    else {
        if (
            rock is ahead
        )
        then {
            turn(3);
            goto D10;
            A10:
        }
        else {
            move(1);
        }
    } 

    pickup(ASerachFood); 
    turn(3); 
    goto D2;
    A2:
    call ABackFood; 

}
func ABackFood{
    do {
        drop();
        turn(3);
        goto D5;
        A5:
        call ASerachFood;
    }
    if (
        home in here
    )

    if (
        bit(1) is here
    )
    then {
        nop;
    }
    else {
        if (
            bit(2) is here
        )
        then {
            turn(1);
            goto B13;
            A13:
        }
        else {
            if (
                bit(3) is here
            )
            then {
                turn(2);
                goto C14;
                A14:
            }
            else {
                if (
                    bit(4) is here
                )
                then {
                    turn(3);
                    goto D15;
                    A15:
                }
                else {
                    if (
                        bit(5) is here
                    )
                    then {
                        turn(4);
                        goto E16;
                        A16:
                    }
                    else {
                        if (
                            bit(6) is here
                        )
                        then {
                            turn(5);
                            goto F17;
                            A17:
                        }
                        else {
                    
                        }
                    }
                }
            }
        }
    } 
    
    move(1);
}

func BSerachFood() {

    if (
        randint(3) is 0
    )
    then {
        turn(1);
        goto C18;
        B18:
    }
    else {
        do {
            turn(5);
            goto A19;
            B19:
        }
        if (
            randint(2) in 0
        )
    } 

    if (
        food is left
    )
    then {
        turn(5);
        goto A0;
        B0:
    }
    else {
        do {
            turn(1);
            goto C1;
            B1:
        }
        if (
            food in right
        )
   } 

    if (
        bit(2) is here
    )
    then {
        nop;
    }
    else {
        if (
        bit(2) is here
        )
        then {
            nop;
        }
        else {
            if (
                bit(3) is here
            )
            then {
                nop;
            }
            else {   
                if (
                    bit(4) is here
                )
                then {
                    nop;
                }
                else {   
                    if (
                        bit(5) is here
                    )
                    then {
                        nop;
                    }
                    else {   
                        if (
                            bit(6) is here
                        )
                        then {
                            nop;
                        }
                        else {   
                            if (
                                bit(6) is here
                            )
                            then {
                                nop;
                            }
                            else {   
                                mark(2);
                            }
                        }
                    }
                }
            }
        }
    } 


    if (
        friendWithFood is ahead
    )
    then {
        turn(1);
        goto C7;
        B7:
        move(1);
        turn(5);
        goto A8;
        B8:
        move(1);
        turn(1);
        goto C9;
        B9;
    } 
    else {
        if (
            rock is ahead
        )
        then {
            turn(3);
            goto E10;
            B10:
        }
        else {
            move(1);
        }
    } 

    pickup(BSerachFood); 
    turn(3); 
    goto E2;
    B2:
    call BBackFood; 

}
func BBackFood{
    do {
        drop();
        turn(3);
        goto E5;
        B5:
        call BSerachFood;
    }
    if (
        home in here
    )

    if (
        bit(2) is here
    )
    then {
        nop;
    }
    else {
        if (
            bit(3) is here
        )
        then {
            turn(1);
            goto C13;
            A13:
        }
        else {
            if (
                bit(4) is here
            )
            then {
                turn(2);
                goto D14;
                A14:
            }
            else {
                if (
                    bit(5) is here
                )
                then {
                    turn(3);
                    goto E15;
                    A15:
                }
                else {
                    if (
                        bit(6) is here
                    )
                    then {
                        turn(4);
                        goto F16;
                        A16:
                    }
                    else {
                        if (
                            bit(1) is here
                        )
                        then {
                            turn(5);
                            goto A17;
                            A17:
                        }
                        else {
                    
                        }
                    }
                }
            }
        }
    } 
    
    move(1);
}

func CSerachFood() {

    if (
        randint(3) is 0
    )
    then {
        turn(1);
        goto D18;
        C18:
    }
    else {
        do {
            turn(5);
            goto B19;
            C19:
        }
        if (
            randint(2) in 0
        )
    } 

    if (
        food is left
    )
    then {
        turn(5);
        goto B0;
        C0:
    }
    else {
        do {
            turn(1);
            goto D1;
            C1:
        }
        if (
            food in right
        )
   } 

    if (
        bit(3) is here
    )
    then {
        nop;
    }
    else {
        if (
        bit(3) is here
        )
        then {
            nop;
        }
        else {
            if (
                bit(4) is here
            )
            then {
                nop;
            }
            else {   
                if (
                    bit(5) is here
                )
                then {
                    nop;
                }
                else {   
                    if (
                        bit(6) is here
                    )
                    then {
                        nop;
                    }
                    else {   
                        if (
                            bit(1) is here
                        )
                        then {
                            nop;
                        }
                        else {   
                            if (
                                bit(1) is here
                            )
                            then {
                                nop;
                            }
                            else {   
                                mark(3);
                            }
                        }
                    }
                }
            }
        }
    } 


    if (
        friendWithFood is ahead
    )
    then {
        turn(1);
        goto D7;
        C7:
        move(1);
        turn(5);
        goto B8;
        C8:
        move(1);
        turn(1);
        goto D9;
        C9;
    } 
    else {
        if (
            rock is ahead
        )
        then {
            turn(3);
            goto F10;
            C10:
        }
        else {
            move(1);
        }
    } 

    pickup(CSerachFood); 
    turn(3); 
    goto F2;
    C2:
    call CBackFood; 

}
func CBackFood{
    do {
        drop();
        turn(3);
        goto F5;
        C5:
        call CSerachFood;
    }
    if (
        home in here
    )

    if (
        bit(3) is here
    )
    then {
        nop;
    }
    else {
        if (
            bit(4) is here
        )
        then {
            turn(1);
            goto D13;
            A13:
        }
        else {
            if (
                bit(5) is here
            )
            then {
                turn(2);
                goto E14;
                A14:
            }
            else {
                if (
                    bit(6) is here
                )
                then {
                    turn(3);
                    goto F15;
                    A15:
                }
                else {
                    if (
                        bit(1) is here
                    )
                    then {
                        turn(4);
                        goto A16;
                        A16:
                    }
                    else {
                        if (
                            bit(2) is here
                        )
                        then {
                            turn(5);
                            goto B17;
                            A17:
                        }
                        else {
                    
                        }
                    }
                }
            }
        }
    } 
    
    move(1);
}

func DSerachFood() {

    if (
        randint(3) is 0
    )
    then {
        turn(1);
        goto E18;
        D18:
    }
    else {
        do {
            turn(5);
            goto C19;
            D19:
        }
        if (
            randint(2) in 0
        )
    } 

    if (
        food is left
    )
    then {
        turn(5);
        goto C0;
        D0:
    }
    else {
        do {
            turn(1);
            goto E1;
            D1:
        }
        if (
            food in right
        )
   } 

    if (
        bit(4) is here
    )
    then {
        nop;
    }
    else {
        if (
        bit(4) is here
        )
        then {
            nop;
        }
        else {
            if (
                bit(5) is here
            )
            then {
                nop;
            }
            else {   
                if (
                    bit(6) is here
                )
                then {
                    nop;
                }
                else {   
                    if (
                        bit(1) is here
                    )
                    then {
                        nop;
                    }
                    else {   
                        if (
                            bit(2) is here
                        )
                        then {
                            nop;
                        }
                        else {   
                            if (
                                bit(2) is here
                            )
                            then {
                                nop;
                            }
                            else {   
                                mark(4);
                            }
                        }
                    }
                }
            }
        }
    } 


    if (
        friendWithFood is ahead
    )
    then {
        turn(1);
        goto E7;
        D7:
        move(1);
        turn(5);
        goto C8;
        D8:
        move(1);
        turn(1);
        goto E9;
        D9;
    } 
    else {
        if (
            rock is ahead
        )
        then {
            turn(3);
            goto A10;
            D10:
        }
        else {
            move(1);
        }
    } 

    pickup(DSerachFood); 
    turn(3); 
    goto A2;
    D2:
    call DBackFood; 

}
func DBackFood{
    do {
        drop();
        turn(3);
        goto A5;
        D5:
        call DSerachFood;
    }
    if (
        home in here
    )

    if (
        bit(4) is here
    )
    then {
        nop;
    }
    else {
        if (
            bit(5) is here
        )
        then {
            turn(1);
            goto E13;
            A13:
        }
        else {
            if (
                bit(6) is here
            )
            then {
                turn(2);
                goto F14;
                A14:
            }
            else {
                if (
                    bit(1) is here
                )
                then {
                    turn(3);
                    goto A15;
                    A15:
                }
                else {
                    if (
                        bit(2) is here
                    )
                    then {
                        turn(4);
                        goto B16;
                        A16:
                    }
                    else {
                        if (
                            bit(3) is here
                        )
                        then {
                            turn(5);
                            goto C17;
                            A17:
                        }
                        else {
                    
                        }
                    }
                }
            }
        }
    } 
    
    move(1);
}

func ESerachFood() {

    if (
        randint(3) is 0
    )
    then {
        turn(1);
        goto F18;
        E18:
    }
    else {
        do {
            turn(5);
            goto D19;
            E19:
        }
        if (
            randint(2) in 0
        )
    } 

    if (
        food is left
    )
    then {
        turn(5);
        goto D0;
        E0:
    }
    else {
        do {
            turn(1);
            goto F1;
            E1:
        }
        if (
            food in right
        )
   } 

    if (
        bit(5) is here
    )
    then {
        nop;
    }
    else {
        if (
        bit(5) is here
        )
        then {
            nop;
        }
        else {
            if (
                bit(6) is here
            )
            then {
                nop;
            }
            else {   
                if (
                    bit(1) is here
                )
                then {
                    nop;
                }
                else {   
                    if (
                        bit(2) is here
                    )
                    then {
                        nop;
                    }
                    else {   
                        if (
                            bit(3) is here
                        )
                        then {
                            nop;
                        }
                        else {   
                            if (
                                bit(3) is here
                            )
                            then {
                                nop;
                            }
                            else {   
                                mark(5);
                            }
                        }
                    }
                }
            }
        }
    } 


    if (
        friendWithFood is ahead
    )
    then {
        turn(1);
        goto F7;
        E7:
        move(1);
        turn(5);
        goto D8;
        E8:
        move(1);
        turn(1);
        goto F9;
        E9;
    } 
    else {
        if (
            rock is ahead
        )
        then {
            turn(3);
            goto B10;
            E10:
        }
        else {
            move(1);
        }
    } 

    pickup(ESerachFood); 
    turn(3); 
    goto B2;
    E2:
    call EBackFood; 

}
func EBackFood{
    do {
        drop();
        turn(3);
        goto B5;
        E5:
        call ESerachFood;
    }
    if (
        home in here
    )

    if (
        bit(5) is here
    )
    then {
        nop;
    }
    else {
        if (
            bit(6) is here
        )
        then {
            turn(1);
            goto F13;
            A13:
        }
        else {
            if (
                bit(1) is here
            )
            then {
                turn(2);
                goto A14;
                A14:
            }
            else {
                if (
                    bit(2) is here
                )
                then {
                    turn(3);
                    goto B15;
                    A15:
                }
                else {
                    if (
                        bit(3) is here
                    )
                    then {
                        turn(4);
                        goto C16;
                        A16:
                    }
                    else {
                        if (
                            bit(4) is here
                        )
                        then {
                            turn(5);
                            goto D17;
                            A17:
                        }
                        else {
                    
                        }
                    }
                }
            }
        }
    } 
    
    move(1);
}

func FSerachFood() {

    if (
        randint(3) is 0
    )
    then {
        turn(1);
        goto A18;
        F18:
    }
    else {
        do {
            turn(5);
            goto E19;
            F19:
        }
        if (
            randint(2) in 0
        )
    } 

    if (
        food is left
    )
    then {
        turn(5);
        goto E0;
        F0:
    }
    else {
        do {
            turn(1);
            goto A1;
            F1:
        }
        if (
            food in right
        )
   } 

    if (
        bit(6) is here
    )
    then {
        nop;
    }
    else {
        if (
        bit(6) is here
        )
        then {
            nop;
        }
        else {
            if (
                bit(1) is here
            )
            then {
                nop;
            }
            else {   
                if (
                    bit(2) is here
                )
                then {
                    nop;
                }
                else {   
                    if (
                        bit(3) is here
                    )
                    then {
                        nop;
                    }
                    else {   
                        if (
                            bit(4) is here
                        )
                        then {
                            nop;
                        }
                        else {   
                            if (
                                bit(4) is here
                            )
                            then {
                                nop;
                            }
                            else {   
                                mark(6);
                            }
                        }
                    }
                }
            }
        }
    } 


    if (
        friendWithFood is ahead
    )
    then {
        turn(1);
        goto A7;
        F7:
        move(1);
        turn(5);
        goto E8;
        F8:
        move(1);
        turn(1);
        goto A9;
        F9;
    } 
    else {
        if (
            rock is ahead
        )
        then {
            turn(3);
            goto C10;
            F10:
        }
        else {
            move(1);
        }
    } 

    pickup(FSerachFood); 
    turn(3); 
    goto C2;
    F2:
    call FBackFood; 

}
func FBackFood{
    do {
        drop();
        turn(3);
        goto C5;
        F5:
        call FSerachFood;
    }
    if (
        home in here
    )

    if (
        bit(6) is here
    )
    then {
        nop;
    }
    else {
        if (
            bit(1) is here
        )
        then {
            turn(1);
            goto A13;
            A13:
        }
        else {
            if (
                bit(2) is here
            )
            then {
                turn(2);
                goto B14;
                A14:
            }
            else {
                if (
                    bit(3) is here
                )
                then {
                    turn(3);
                    goto C15;
                    A15:
                }
                else {
                    if (
                        bit(4) is here
                    )
                    then {
                        turn(4);
                        goto D16;
                        A16:
                    }
                    else {
                        if (
                            bit(5) is here
                        )
                        then {
                            turn(5);
                            goto E17;
                            A17:
                        }
                        else {
                    
                        }
                    }
                }
            }
        }
    } 
    
    move(1);
}